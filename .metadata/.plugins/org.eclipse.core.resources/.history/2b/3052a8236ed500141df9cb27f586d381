/*Kati KyllÃ¶nen
 * 011539913
 * Big Data Framework
 * Exercise set 2
 * Exercise 2 Movies
 * 
 * Ratings:
 * UserID::MovieID::Rating::Timestamp
 * 
 * Movies:
 * MovieID::Title::Genres
 * 
 * Users:
 * UserID::Gender::Age::Occupation::Zip-code
 * 
 * Target:
 * RDD[(userID, gender, age, occupation, Set(movie, genre, rating))]
 * Be sure that you choose correct data types, e.g., IDs are Integers. 
 * 
 */

import org.apache.spark.SparkContext
import org.apache.spark.SparkContext._
import org.apache.spark.SparkConf
import org.apache.spark.rdd.RDD

object Movies {
  
  def main (args: Array[String]){
    val path = "/home/kati/foo/BDF/" // Path to files
    val conf = new SparkConf().setAppName("Movies").setMaster("local[2]")
    val sc = new SparkContext(conf)
    // read the files as RDDs and cache them
    val movies = sc.textFile(path+"movies.dat", 2)//.cache()
    val users = sc.textFile(path+"users.dat", 2)//.cache()
    val ratings = sc.textFile(path+"ratings.dat", 2)//.cache()
    
    
    val splittedUsersMap = users.map(line => line.split("::")).map(x => (x(0).toInt, (x(1), x(2).toInt, x(3).toInt)))
     println ("........-----splittedUsersMap" +splittedUsersMap.first() )
     //userId -> (gender, age, occupation) 
    
    val splittedMoviesMap = movies.map(line => line.split("::")).map(x => (x(0).toInt, (x(1), x(2)))) 
     println ("........-----splittedMoviesMap" +splittedMoviesMap.first() )
    // //movieId -> (Title, Genre)
     
    val splittedRatingsMap = ratings.map(line => line.split("::")).map(x => (x(1).toInt, (x(0).toInt, x(2).toInt, x(3).toInt))) 
     println ("........-----splittedRatingsMap" +splittedRatingsMap.first() )
     //movieId -> (UserId, Rating, Timestamp)
   
     val splittedRatingsMapByUser = ratings.map(line => line.split("::")).map(x => (x(0).toInt, (x(1).toInt, x(2).toInt, x(3).toInt))) 
     println ("........-----splittedRatingsMap" +splittedRatingsMap.first() )
     //userId -> (movieId, Rating, Timestamp)
    
     
     
     val moviesAndRatings = splittedMoviesMap.join(splittedRatingsMap)
     println (":::::::::::::::::::::::::"+moviesAndRatings.values.first())
     //(Title, Genre), (userID, Rating, Timestamp)
     //((Bonnie and Clyde (1967),Crime|Drama),(2,3,978298813))
     
     val moviesAndRatingsByUser = moviesAndRatings.values.map(x => (x._2._1, (x._1._1, x._1._2, x._2._2))).groupByKey
     println ("******************"+moviesAndRatingsByUser.first())
     //userId -> CompactBuffer(Title, Genre, Rating)
     //(4904,CompactBuffer((Mad Max (1979),Action|Sci-Fi,5), (Casablanca (1942),Drama|Romance|War,5)
     
     val res = splittedUsersMap.join(moviesAndRatingsByUser)
     println ("-.-.-.-.-.-.-.-.-.-.-."+res.first())
     //userID,(Gender, Age, Occupation)(Title, Genre, Rating)...
     //(4904,((M,50,15),CompactBuffer((Mad Max (1979),Action|Sci-Fi,5), (Casablanca (1942),Drama|Romance|War,5)... 
     
     
     //val fin = res.map(x => x._1, )
     //println ("Adults have watched: "+numberOfWatchedMovies +" movies in total")
     //topTen (res)
    
     topTenMovies(res)
     
     
     def numberOfWatchedMovies = {
      
      val adults = res.filter(x => x._2._1._2 >= 18)
      //println ("^^^^^^^^^^^^^^^^^^"+adults.first)
    
      val employedAdults = adults.filter(x => x._2._1._3 != 18 && x._2._1._3 != 4)
      //val tenAdults = employedAdults.take(10)
      //println(tenAdults.foreach(x => println(x)))
      val sum = employedAdults.map(x => x._2._2.size).reduce(_+_)
      sum
        
    }
   
        
    def topTen(rdd: RDD[(Int, ((String, Int, Int), Iterable[(String, Int, String)]))]) : RDD[(Int, Array[(String, Float)])] = {
      //val onlyMovies = res.flatMap(x => x._2._2)
      val moviesByUserAge = res.map(x => (x._2._1._2, x._2._2))
      println (moviesByUserAge.first)
      //age, (title, genre, rating)
      //(50,CompactBuffer((Mad Max (1979),Action|Sci-Fi,5), (Casablanca (1942),Drama|Romance|War,5),
      
            // take userID, age, Set(movie, rating, genre)
      return  res.map(x => (x._1, (x._2._1._3, x._2._2))).values.flatMap(x => x._2.map(y => ((x._1, y._1), y._2))).groupByKey.mapValues(x => (x.reduce(_ + _).toFloat / x.size)).map(x => (x._1._1, (x._1._2, x._2))).groupByKey.map(x => (x._1, x._2.toArray.sortBy(_._2)(Ordering[Float].reverse).take(10))).sortByKey()                                        //for each age group take 10 then sort the resulting RDD by age group
    
      
      }

    def topTenMovies (mov :RDD[((Int, String, Int, Int), Set[(String, String, Int)])]) :RDD[(Int, Array[(String, Float)])] = {
        val allAgesAndMovies = mov.map(x => (x._1._3, x._2) )
        val flatAgesAndMovies = allAgesAndMovies.flatMap(x => x._2.map(y => ((x._1, y._1), (y._3))))
        val groupedMovies = flatAgesAndMovies.groupByKey().mapValues(x => x.reduce(_+_)/x.size.toFloat)
 
        val byAge = groupedMovies.map(x => (x._1._1, (x._1._2, x._2))).groupByKey()
        val sortedM = byAge.map(x => (x._1, x._2.toArray.sortBy(_._2)(Ordering[Float].reverse).take(10))).sortByKey()
       
        return sortedM                     
  }

    
    
def topTenMovies(rdd: RDD[(Int, ((String, Int, Int), Iterable[(String, String, Int)]))]) : Array[(Int, Array[(String, Float)])] = {
                         //userID,(Gender, Age, Occupation)(Title, Genre, Rating)...
  val moviesByUser = rdd.map(x => (x._1, (x._2._1._2, x._2._2)))      
  //userID, age, (movie, rating, genre)
  val moviesByAge = moviesByUser.values
  //age, (movie, rating, genre)
  val moviesFlat = moviesByAge.flatMap(x => x._2.map(y => ((x._1, y._1), y._3))).groupByKey
  //age, movie, (rating)
  val averageRatings = moviesFlat.mapValues(x => (x.reduce(_+_).toFloat / x.size))
  //(age, movie), average
  val averageByAge = averageRatings.map(x => (x._1._1,(x._1._2, x._2))).groupByKey
  //age (movie, average)
  val sorted = averageByAge.map(x => (x._1, x._2.toArray.sortBy(_._2)(Ordering[Float].reverse)))
  val top = sorted.take(10)
  top.foreach(x => println(x))
  return top
   
  /*
  return  rdd.map(x => (x._1, (x._2._1._3, x._2._2)))      // take userID, age, Set(movie, rating, genre)
    .values                                                  // drop userID
    .flatMap(x => x._2.map(y => ((x._1, y._1), y._2))).groupByKey  // (age, movie), rating i.e. drop genre
    .mapValues(x => (x.reduce(_ + _).toFloat / x.size))            // calculate avg ratings
    .map(x => (x._1._1, (x._1._2, x._2))).groupByKey               // reorganize to have age group as first, then group by it
    .map(x => (x._1, x._2.toArray.sortBy(_._2)(Ordering[Float].reverse) // make an array of Set(movie, rating), order it by rating
        .take(10))).sortByKey()                                        //for each age group take 10 then sort the resulting RDD by age group
    */                                                                   
    }
         
     def topTenMoviesOneliner(rdd: RDD[(Int, ((String, Int, Int), Iterable[(String, Int, String)]))]) : RDD[(Int, Array[(String, Float)])] = {
 
    return  rdd.map(x => (x._1, (x._2._1._3, x._2._2)))      // take userID, age, Set(movie, rating, genre)
    .values                                                  // drop userID
    .flatMap(x => x._2.map(y => ((x._1, y._1), y._2))).groupByKey  // (age, movie), rating i.e. drop genre
    .mapValues(x => (x.reduce(_ + _).toFloat / x.size))            // calculate avg ratings
    .map(x => (x._1._1, (x._1._2, x._2))).groupByKey               // reorganize to have age group as first, then group by it
    .map(x => (x._1, x._2.toArray.sortBy(_._2)(Ordering[Float].reverse) // make an array of Set(movie, rating), order it by rating
        .take(10))).sortByKey()                                        //for each age group take 10 then sort the resulting RDD by age group
                                                                       
    }

      
  }

}