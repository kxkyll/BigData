/*Kati KyllÃ¶nen
 * 011539913
 * Big Data Framework
 * Exercise set 2
 * Exercise 2 Movies
 * 
 * Ratings:
 * UserID::MovieID::Rating::Timestamp
 * 
 * Movies:
 * MovieID::Title::Genres
 * 
 * Users:
 * UserID::Gender::Age::Occupation::Zip-code
 * 
 * Target:
 * RDD[(userID, gender, age, occupation, Set(movie, genre, rating))]
 * Be sure that you choose correct data types, e.g., IDs are Integers. 
 * 
 */

import org.apache.spark.SparkContext
import org.apache.spark.SparkContext._
import org.apache.spark.SparkConf


object Movies {
  
  def main (args: Array[String]){
    val path = "/home/kati/foo/BDF/" // Path to files
    val conf = new SparkConf().setAppName("Movies").setMaster("local[2]")
    val sc = new SparkContext(conf)
    // read the files as RDDs and cache them
    val movies = sc.textFile(path+"movies.dat", 2).cache()
    val users = sc.textFile(path+"users.dat", 2).cache()
    val ratings = sc.textFile(path+"ratings.dat", 2).cache()
    
    // split each movie, user and rating to own 
    //val movieMap = movies.map { x => x.split("::")}
    //val usersMap = users.map { x => x.split("::") }
    //val ratingsMap = ratings.map { x => x.split("::") }
    
    // split each movie, user and rating and add keys to tuples
    val moviePairs = movies.map(x => (x.split("::")(0), x))
    
    val userPairs = users.map(x => (x.split("::")(0), x))
    //result: UserID, UserID::Gender::Age::Occupation::Zip-code
    val userPairsSplit = users.map(x => (x.split("::")(0), x))
    val ratingsPairs = ratings.map(x => (x.split("::")(0), x))
    
    println ("-------------user: "+userPairs.first())
    println ("-------------movie: "+moviePairs.first())
    println ("-------------rating: "+ratingsPairs.first())
    
    val userKeyValue = userPairs.map(x => (x._2.split("::")(1),(2),(3))
    
    //val usersAndRatings = userPairs.++(ratingsPairs).groupByKey()
    //val usersAndRatingsuu = usersAndRatings.map(x => x.swap);
    
    //println ("----------------------userAndRating: "+usersAndRatings.first())
    //println ("----------------------userAndRatinguu: "+usersAndRatingsuu.first())
  
    
        
    
    
    
      
      
  }

}